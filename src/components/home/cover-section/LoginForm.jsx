import React, { useState, useContext } from "react";
import AuthContext from "../../../providers/Auth";
import { handleSignIn } from "../../../backend/auth";
import { useNavigate } from "react-router-dom";

/**
 * @component
 * @description
 * The `LoginForm` component provides a form for users to log in using their email and password.
 * - It includes input fields for email and password.
 * - Submits the login credentials to `logInWithEmailAndPassword` for authentication.
 * - Displays feedback messages indicating success or failure of the login attempt.
 * - Uses `Snackbar` for error handling and `Grid` and `Box` from MUI for layout purposes.
 *
 * @example
 * <LoginForm />
 */
function LoginForm() {
  const { logInWithEmailAndPassword } = useContext(AuthContext);
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [success, setSuccess] = useState(null);
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  /**
   * @description
   * Handles changes in the input fields and updates the `formData` state.
   * @param {Event} e - The event object generated by the input change.
   */
  const handleInputChange = (e) => {
    const { name, value } = e.target;

    setFormData({
      ...formData,
      [name]: value,
    });
  };

  /**
   * @description
   * Handles the form submission event when the user attempts to log in.
   * - Prevents the default form submission.
   * - Triggers the `handleSignIn` function for login authentication.
   * - Displays feedback on the success or failure of the login.
   * @param {Event} e - The event object generated by the form submission.
   */
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);

    try {
      // if (formData.email && formData.password) {
      await handleSignIn(
        logInWithEmailAndPassword,
        formData.email,
        formData.password,
        setErrorMessage
      );
      setSuccess(true);
    } catch (error) {
      console.error(error.message.split("/")[1]);
      setSuccess(false);
    } finally {
      setLoading(false); // Ensure loading is set to false after sign-in attempt
    }
  };

  return (
    <>
      <form onSubmit={handleSubmit} className="signup-form">
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleInputChange}
            required
          />
        </div>

        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input
            type="password"
            id="password"
            name="password"
            value={formData.password}
            onChange={handleInputChange}
            required
          />
        </div>
        <br />
        <center>
          <button type="submit" className="btn" id="login-btn">
            {loading ? "Loading..." : "Log in"}
          </button>
        </center>
      </form>

      {success !== null && (
        <>
          {success && errorMessage.length === 0 ? (
            <center>
              <p>You Logged in successfully</p>
            </center>
          ) : (
            <center>
              <p>{`Logging in failed (${errorMessage}`} </p>
            </center>
          )}
        </>
      )}
    </>
  );
}

export default LoginForm;
