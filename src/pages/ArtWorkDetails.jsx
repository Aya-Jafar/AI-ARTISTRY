import React, { useEffect, useState, useContext } from "react";
import { useParams } from "react-router-dom";
import { getArtworkDetails, getPosts } from "../backend/data";
import { motion } from "framer-motion";
import ArtworkDetailBtn from "../components/artwork-detail/ArtworkDetailBtn";
import likeIcon from "../images/love (2).png";
import commentIcon from "../images/comment.png";
import { getGeneratedArtworkDetails } from "../backend/data";
import AuthContext from "../providers/Auth";
import CommentInput from "../components/artwork-detail/CommentInput";
import CounterItem from "../components/artwork-detail/CounterItem";
import AllComments from "../components/artwork-detail/AllComments";
import CustomAlert from "../components/common/CustomAlert";
import AlertContext, { AlertProvider } from "../providers/Alert";
import { infoStyle } from "../utils/formaters";

const ArtworkDetail = ({ isGeneratedArtwork = false, label = "" }) => {
  const { id, generatedImageUrl, postUrl } = useParams();
  const { currentUser } = useContext(AuthContext);
  const [currentArtwork, setCurrentArtwork] = useState(null);
  const [likesCount, setLikesCount] = useState(0);
  const [commentsCount, setCommentsCount] = useState(0);
  const [allComments, setAllComments] = useState([]);
  const [currentComment, setCurrentComment] = useState("");

  const { showSnackBar } = useContext(AlertContext);

  useEffect(() => {
    // if it's not generated artwork then get it's data by it's id
    if (!isGeneratedArtwork) {
      getArtworkDetails(
        id,
        setCurrentArtwork,
        setLikesCount,
        setCommentsCount,
        setAllComments
      );
    } else {
      // if it's generated by the user, get it's data by it's decoded URL
      if (label === "posts") {
        getGeneratedArtworkDetails(
          currentUser,
          setCurrentArtwork,
          decodeURIComponent(postUrl),
          label
        );
      }
      if (label === "saved-generated") {
        getGeneratedArtworkDetails(
          currentUser,
          setCurrentArtwork,
          decodeURIComponent(generatedImageUrl),
          label
        );
      }
    }
  }, [id, generatedImageUrl, currentArtwork, allComments]);

  const imageMaker = () => {
    if (id) {
      return currentArtwork.image;
    }
    if (currentArtwork.generatedImageUrl) {
      return currentArtwork.generatedImageUrl;
    } else {
      return currentArtwork.postUrl;
    }
  };

  return (
    <>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        transition={{ duration: 0.5 }}
        className="artwork-detail"
      >
        <>
          {currentArtwork && (
            <>
              <motion.img
                src={imageMaker()}
                alt=""
                className="artwork-detail-img"
                style={{
                  filter: `brightness(${currentArtwork.brightness}%) contrast(${currentArtwork.contrast}%)`,
                }}
              />
              <motion.div
                className="artwork-info"
                style={infoStyle(currentArtwork.prompt)}
              >
                {showSnackBar && (
                  <CustomAlert message="Artwork added successfully" />
                )}

                {currentArtwork.model ? (
                  <motion.h1>{currentArtwork.model}</motion.h1>
                ) : (
                  <motion.h1>Art diffusion</motion.h1>
                )}

                <motion.h3 className="prompt-text">
                  {currentArtwork.prompt}
                </motion.h3>

                {currentArtwork.creator ? (
                  <motion.p>{`Prompt was created by ${currentArtwork.creator}`}</motion.p>
                ) : (
                  <motion.p>unknown prompt creator</motion.p>
                )}

                <br />
                <div className="artwork-detail-btns">
                  <ArtworkDetailBtn
                    text="Like"
                    artId={id}
                    id="like-btn"
                    setLikesCount={setLikesCount}
                  />
                  <ArtworkDetailBtn text="Save" artId={id} id="save-btn" />
                </div>

                <div className="likes-comments-count">
                  <CounterItem
                    counterIcon={likeIcon}
                    countesNumber={likesCount}
                  />
                  <CounterItem
                    counterIcon={commentIcon}
                    countesNumber={commentsCount}
                  />
                </div>

                <CommentInput
                  artId={id}
                  setCurrentComment={setCurrentComment}
                  currentComment={currentComment}
                />
                <AllComments comments={allComments} artId={id} />
              </motion.div>
            </>
          )}
        </>
      </motion.div>
    </>
  );
};

export default ArtworkDetail;
